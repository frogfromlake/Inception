# =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# DOCKER-COMPOSE FILE -
# Inception project - LEMP stack, containerized.
# =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

version: '3.3'

# Volumes are the preferred mechanism for persisting data
# generated by and used by Docker containers.

# While bind mounts are dependent on the directory structure
# and OS of the host machine, volumes are completely managed by Docker.

# A volume does not increase the size of the containers using it. 
# The volumeâ€™s contents exist outside the lifecycle of a given container.


# volumes:      While it is possible to declare volumes on the fly as part of the service declaration, 
#               this section allows you to create named volumes that can be reused across multiple services
# driver:       specify which volume driver should be used for this volume. 
#               Defaults to whatever driver the Docker Engine has been configured to use, which in most cases is local. 
# driver_opts:  Specify a list of options as key-value pairs to pass to the driver for this volume.
# type:         'none' -> no physical disk partition linked to the mount point
# device:       path to safed volumes

volumes:
  WordPress:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /home/fquist/data/wordpress
  MariaDB:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /home/fquist/data/mariadb
  stat_vol:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /home/fquist/data/static
  Static:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /home/fquist/data/static


services:
  mariadb:
    container_name: mariadb_c
    build:
      context: ./requirements/mariadb
    ports:
      - '3306:3306'
    env_file:
      - .env
    volumes:
      - MariaDB:/var/lib/mysql
    networks:
      - localhost
    restart: always

  nginx:
    container_name: nginx_c
    build:
      context: ./requirements/nginx
    ports:
      - "443:443"
      - "444:444"
    volumes:
      - WordPress:/var/www/wordpress
      - stat_vol:/var/www/static
    networks:
      - localhost
    depends_on:
      - wordpress
    restart: always

  wordpress:
    container_name: wordpress_c
    build:
      context: ./requirements/wordpress
    env_file:
      - .env
    ports:
      - '9000:9000'
    depends_on:
      - mariadb
    volumes:
      - WordPress:/var/www/wordpress
    networks:
      - localhost
    restart: always

  redis:
    container_name: redis_c
    build:
      context: ./requirements/bonus/redis
    env_file:
      - .env
    tty: true
    ports:
      - "127.0.0.1:6379:6379"
    image: srcs-redis
    networks:
      - localhost
    volumes:
      - WordPress:/var/www/wordpress
    restart: always

  adminer:
    container_name: adminer_c
    build: ./requirements/bonus/adminer
    depends_on: 
      - mariadb
    restart: always
    tty: true
    volumes:
      - WordPress:/var/www/adminer
    networks:
      - localhost

  ftp:
    tty: true
    depends_on:
    - mariadb
    - wordpress
    - nginx
    container_name: ftp_c
    build: ./requirements/bonus/ftp
    volumes:
      - WordPress:/etc/ftp/wordpress
    restart: always
    ports:
      - "21:21"
    networks:
      - localhost

  log:
    build: ./requirements/bonus/log
    container_name: log_c
    tty: true
    restart: always
    networks:
      - localhost
    
  static:
    build: ./requirements/bonus/static
    container_name: static_c
    volumes:
      - stat_vol:/var/www/static
    tty: true
    restart: always

networks:
  localhost: { }